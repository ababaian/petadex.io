name: Generate Database Documentation
on:
  workflow_dispatch:
    inputs:
      db_host:
        description: 'Database Host'
        required: true
        type: string
      db_port:
        description: 'Database Port'
        required: true
        type: string
        default: '5432'
      db_name:
        description: 'Database Name'
        required: true
        type: string
      db_user:
        description: 'Database User'
        required: true
        type: string
      db_password:
        description: 'Database Password'
        required: true
        type: string
jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Generate database documentation
        env:
          DB_HOST: ${{ github.event.inputs.db_host }}
          DB_PORT: ${{ github.event.inputs.db_port }}
          DB_NAME: ${{ github.event.inputs.db_name }}
          DB_USER: ${{ github.event.inputs.db_user }}
          DB_PASS: ${{ github.event.inputs.db_password }}
        run: |
          mkdir -p docs/database
          echo "# Petadex Database Schema" > docs/database/generated-schema.md
          echo "" >> docs/database/generated-schema.md
          echo "Auto-generated on $(date)" >> docs/database/generated-schema.md
          echo "" >> docs/database/generated-schema.md
          echo "" >> docs/database/generated-schema.md
          echo "## Tables" >> docs/database/generated-schema.md
          echo "" >> docs/database/generated-schema.md
          
          # Get all table names
          TABLES=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name;
          " | tr -d ' ')
          
          echo "=== DEBUG: Found tables: $TABLES ==="
          
          # Generate documentation for each table
          for table in $TABLES; do
            echo "=== DEBUG: Processing table: $table ==="
            echo "### ${table^^} Table" >> docs/database/generated-schema.md
            echo "" >> docs/database/generated-schema.md
            
            # Get table comment/description
            TABLE_COMMENT=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -A -c "
            SELECT COALESCE(
              obj_description(c.oid, 'pg_class'),
              'No description available'
            )
            FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relname = '$table'
            AND n.nspname = 'public'
            AND c.relkind = 'r';
            " | tr -d '\n\r')
            
            echo "**Description:** $TABLE_COMMENT" >> docs/database/generated-schema.md
            echo "" >> docs/database/generated-schema.md
            
            echo "| Column | Type | Nullable | Default | Comment |" >> docs/database/generated-schema.md
            echo "|--------|------|----------|---------|---------|" >> docs/database/generated-schema.md
            
            # Get column information including comments
            PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "
            SELECT 
              '| ' || c.column_name || ' | ' || 
              c.data_type || 
              CASE WHEN c.character_maximum_length IS NOT NULL 
                   THEN '(' || c.character_maximum_length || ')' 
                   ELSE '' END || ' | ' ||
              CASE WHEN c.is_nullable = 'YES' THEN 'Yes' ELSE 'No' END || ' | ' ||
              COALESCE(c.column_default, '') || ' | ' ||
              COALESCE(
                (SELECT description 
                 FROM information_schema.columns col
                 LEFT JOIN pg_class pc ON pc.relname = col.table_name
                 LEFT JOIN pg_description pd ON pd.objoid = pc.oid 
                   AND pd.objsubid = col.ordinal_position
                 WHERE col.table_name = c.table_name 
                   AND col.column_name = c.column_name
                   AND col.table_schema = 'public'
                 LIMIT 1),
                col_description(
                  (SELECT c2.oid FROM pg_class c2 
                   JOIN pg_namespace n ON n.oid = c2.relnamespace 
                   WHERE c2.relname = '$table' AND n.nspname = 'public'), 
                  c.ordinal_position
                ),
                ''
              ) || ' |'
            FROM information_schema.columns c
            WHERE c.table_name = '$table' 
            AND c.table_schema = 'public'
            ORDER BY c.ordinal_position;
            " >> docs/database/generated-schema.md
            
            echo "" >> docs/database/generated-schema.md
          done
          
          echo "## Materialized Views" >> docs/database/generated-schema.md
          echo "" >> docs/database/generated-schema.md
          
          # Get all materialized view names
          MATVIEWS=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "
            SELECT matviewname 
            FROM pg_matviews 
            WHERE schemaname = 'public'
            ORDER BY matviewname;
          " | tr -d ' ')
          
          echo "=== DEBUG: Found materialized views: $MATVIEWS ==="
          
          # Generate documentation for each materialized view
          for matview in $MATVIEWS; do
            echo "=== DEBUG: Processing materialized view: $matview ==="
            echo "### ${matview^^} Materialized View" >> docs/database/generated-schema.md
            echo "" >> docs/database/generated-schema.md
            
            # Get materialized view comment/description
            MATVIEW_COMMENT=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -A -c "
            SELECT COALESCE(
              obj_description(c.oid, 'pg_class'),
              'No description available'
            )
            FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relname = '$matview'
            AND n.nspname = 'public'
            AND c.relkind = 'm';
            " | tr -d '\n\r')
            
            echo "**Description:** $MATVIEW_COMMENT" >> docs/database/generated-schema.md
            echo "" >> docs/database/generated-schema.md
            
            echo "| Column | Type | Nullable | Default | Comment |" >> docs/database/generated-schema.md
            echo "|--------|------|----------|---------|---------|" >> docs/database/generated-schema.md
            
            # Get column information including comments
            PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "
            SELECT 
              '| ' || a.attname || ' | ' || 
              pg_catalog.format_type(a.atttypid, a.atttypmod) || ' | ' ||
              CASE WHEN a.attnotnull THEN 'No' ELSE 'Yes' END || ' | ' ||
              COALESCE(pg_get_expr(d.adbin, d.adrelid), '') || ' | ' ||
              COALESCE(
                col_description(c.oid, a.attnum),
                ''
              ) || ' |'
            FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            JOIN pg_attribute a ON a.attrelid = c.oid
            LEFT JOIN pg_attrdef d ON d.adrelid = c.oid AND d.adnum = a.attnum
            WHERE c.relname = '$matview'
            AND n.nspname = 'public'
            AND c.relkind = 'm'
            AND a.attnum > 0
            AND NOT a.attisdropped
            ORDER BY a.attnum;
            " >> docs/database/generated-schema.md
            
            echo "" >> docs/database/generated-schema.md
          done
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: database-documentation
          path: docs/database/generated-schema.md